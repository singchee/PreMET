

#tidyIpdata
df2=IP_AdmApr-Oct21_ST_EDv2.xlsx

#generate age
df2$age= as.integer(df2$AdmissionDate-df2$DateOfBirth)/60/24/365

#generate HOSLOS
df2$HosLOS = as.integer(df2$DischargeDate - df2$AdmissionDate)/60/24

#convert Emergency Services to medicine
df2$SpecialtyGroup=recode(df2$SpecialtyGroup, "Emergency Services" = "Medicine")

#remove all PreMETs by episode ID
ip_noPremet=ipdata[!ipdata$EpisodeID %in% df1$EpisodeID,]

#EDA for IPData
table(df2$Gender); proportions(table(df2$Gender))
table(df2$`Admission Type`); proportions(table(df2$`Admission Type`))
table(df2$SpecialtyGroup); proportions(table(df2$SpecialtyGroup))
summary(df2$age)
table(df2$StayType); proportions(table(df2$StayType))
summary(df2$HosLOS)
table(df2$dischargeMethod); proportions(table(df2$dischargeMethod))

#tidy PreMETs
#Select required datafields
df1=select(MT_PreMETs_ST_LS_tidy, c('HOSLOS', 'Admission_derived', 'DischargeDT', 'AdmissionTypeDesc', 'DiedDuringEpisodeFlag', 'dischargeMethod', 'PrimaryDx', 'RecipientLevel', 'SenderRole','PatientURNumber', 'PatientAge', 'PatientGender','Type', 'SentAt', 'Escalated', 'NumberRedirects','SentToAcceptedMins', 'AcceptedToCompletedMins','SpecialtyGroup', 'PatientDOB'))
#Convert excel dates
library(openxlsx)
df1$AdmissionDT=convertToDateTime(df1$AdmissionDT)
df1$DischargeDT=convertToDateTime(df1$DischargeDT)

# Identify and remove duplicate PREMETs based on Same Date/Time and and URN
df1$duplicate_time_URN = paste(df1$SentAt, df1$PatientURNumber) #concantate URN and time
df1=distinct(df1, df1$duplicate_time_URN, .keep_all = TRUE) # remove duplicates

#recode speciality
df1$SpecialtyGroup=recode(df1$SpecialtyGroup, "Emergency Services" = "Medicine")
df1$age= as.integer(df1$Admission_derived-df1$PatientDOB)/60/24/365

df1$AdmissionDT=convertToDateTime(df1$AdmissionDT, origin = "1900-01-01")
df1$DischargeDT=convertToDateTime(df1$DischargeDT, origin = "1900-01-01")

#split Premet Date & Time

df1$sent_date=as.Date(df1$SentAt)
df1$sent_time=format(df1$SentAt, "%H:%M")



# Assign unique ID to each PreMET
df1$PreMET_ID = seq.int(nrow(df1))

#recode type of premet into categories

cvs = df1$type %in% 

c("PreMET SBP >200 mmHg", "PreMET HR Within Orange Zone")
df1$type_recoded = df1$type[cvs] = cardiovascular

merged2$type_recode = recode(merged2$type.x, 
"PreMET Urine Output <20ml/h 4 Consecutive Hours"="Renal",
"PreMET Blood Ketones >0.6 mmol/L" = "Endocrine",
"PreMET Ketones >0.6" = "Endocrine",
"PreMET BGL <3.5 mmol/L" = "Endocrine",
"PreMET BGL <3.5 or >20" = "Endocrine",
"PreMET Low BGL" = "Endocrine",
"PreMET Chest Pain" = "Cardiovascular",
"PreMET SBP >200 mmHg" ="Cardiovascular",
"PreMET HR Within Orange Zone" = "Cardiovascular",
"PreMET HR in Orange Zone" = "Cardiovascular",
"PreMET HR Orange Zone" = "Cardiovascular",
"PreMET SBP Orange Zone" = "Cardiovascular",
"PreMET Diastolic BP >100" = "Cardiovascular",
"PreMET Sedation Level 2" = "Cardiovascular",
"PreMET AVPU Response to Voice" = "Neurological",
"PreMET New Change in Cognition or Delirium" = "Neurological",
"PreMET RR 25-29" = "Respiratory",
"PreMET SpO2 Orange Zone" = "Respiratory",
"PreMET RR Orange Zone" = "Respiratory",
"PreMET Moderate Respiratory Distress" = "Respiratory",
"PreMET SpO2 92-95%" = "Respiratory",
"PreMET Pain 8-10" = "Pain",
"PreMET AVPU Response to Pain" = "Pain",
"PreMET Epigastric Pain" = "Pain",
"PreMET Looks/Feels Unwell" = "Staff/Family concern",
"PreMET Staff Concern" = "Staff/Family concern",
"PreMET Family Concern" = "Staff/Family concern",
"PreMET Temp Orange Zone" = "Fever",
"PreMET Temp >38" = "Fever",
"PreMET Seriously Abnormal Investigation" = "Abnormal Investigations",
"PreMET SPECIALTY Observation Chart Escalation" = "Other")
                                
                 


# derive afterhours premet
df1$afterhr = ifelse(format(df1$SentAt, "%H:%M") >= "08:00" & format(df1$SentAt, "%H:%M") <= "17:00", 0, 1) #check if after hours

#Outcomes
df1$LOS=as.numeric(df1$DischargeDT-df1$AdmissionDT)/24 #derive LOS

sort(table(df1$PrimaryDx), decreasing=TRUE)[1:10] #primary diagnosis
sort(prop.table(table(df1$PrimaryDx)), decreasing=TRUE)[1:10]

count(filter(df1, df1$NumberRedirects<1)) #no PreMET not redirected
sum(df1$NumberRedirects) # total no of redirects

#summarise PreMEt type


# MET linkage

# filter MET by date range

MET_raw= read.csv(MET_raw)
MET = select(MET_raw, c('UR Number', 'Sum of Age', 'Gender', 'MET Call DateTime', 'Outcome' ))
MET$URN=MET$`UR Number`

MET$date= as.Date(MET$`MET Call DateTime`, origin="1970-01-01")
MET =filter(MET, MET$date >="2021-04-13" & MET$date <="2021-10-2")

# Generate specific dataset for MET/CB outcome

# Table 1: Select PREMET URNs that EXist in MET dataset


# Table 2: Select MET URNs that Exists in PreMET dataset


# Generate field for 24 hour post PreMET time
df1$'24hour post Premet'= df2$SentAt +hours(24)

# DO a left outer join (1 onto 2)
merged = merge(x=df1,y=MET,by="URN", all.x=TRUE)

#Calculate no. of premets that have METs

merged_24hr = filter(merged, merged$`MET Call DateTime` >= merged$SentAt & merged$`MET Call DateTime`<=merged$`24hour post Premet`)
merged_24hr=distinct(merged_24hr, merged_24hr$PreMET_ID, .keep_all = TRUE)

#Merge MET to PreMET
merged2 = merge(x=df1,y=merged_24hr,by="PreMET_ID", all=TRUE)
merged2$outcome = ifelse(is.na(merged2$`MET Call DateTime`), 0, 1) #assign outcome code



