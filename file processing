
library(tidyverse)
library(openxlsx)


#LOAD DATA
df1=MT_PreMETs_ST_LS_tidy.xlsx
df2=IP_AdmApr-Oct21_ST_EDv2.xlsx

#TIDY INPATIENT DATA

#generate age
df2$age= as.integer(df2$AdmissionDate-df2$DateOfBirth)/60/24/365

#generate HOSLOS

df2$HosLOS = as.integer(df2$DischargeDate - df2$AdmissionDate)/60/24


#recode death
df2$Death = ifelse(df2$dischargeMethod == 'Death', 1, 0)

#recode Emergency Services to medicine
df2$SpecialtyGroup=recode(df2$SpecialtyGroup, "Emergency Services" = "Medicine")

#remove all PreMETs by episode ID
df2=df2[!df2$EpisodeID %in% df1$EpisodeID,]

#EDA for IPData
library(TableOne)
myvars = c("age", "Gender", "PreMET", "HosLOS", "Death", "SpecialtyGroup", "Admission Type")
catvars = c("Gender", "Death", "SpecialtyGroup", "Admission Type")
tab3= CreateTableOne(var=myvars, strat="PreMET", data=merged_final, factorVars = catvars)
chisq.test(merged_final$Death,  merged_final$PreMET)

table(df2$Gender); proportions(table(df2$Gender))
table(df2$`Admission Type`); proportions(table(df2$`Admission Type`))
table(df2$SpecialtyGroup); proportions(table(df2$SpecialtyGroup))
summary(df2$age)
table(df2$StayType); proportions(table(df2$StayType))
summary(df2$HosLOS)
table(df2$Death); proportions(table(df2$Death))


#TIDY PREMETS
#Select required datafields
df1=select(MT_PreMETs_ST_LS_tidy, c('HOSLOS','Admission_Derived2', 'Discharge_derived', 'DischargeDT', 'AdmissionTypeDesc', 'Admission Type',
            'DiedDuringEpisodeFlag', 'dischargeMethod', 'PrimaryDx', 
            'RecipientLevel', 'SenderRole','PatientURNumber', 'PatientAge', 
            'PatientGender','Type', 'SentAt', 'Escalated', 'NumberRedirects',
            'SentToAcceptedMins', 'AcceptedToCompletedMins','SpecialtyGroup', 'PatientDOB', 'StayType' , 'EpisodeID'
           ))
           
# Remove duplicate PREMETs based on Same Date/Time and and URN
df1$duplicate_time_URN = paste(df1$SentAt, df1$PatientURNumber) #concantate URN and time
df1=distinct(df1, df1$duplicate_time_URN, .keep_all = TRUE) # remove duplicates


#recode speciality
df1$SpecialtyGroup=recode(df1$SpecialtyGroup, "Emergency Services" = "Medicine")

#Generate patient age
df1$age= as.integer(df1$Admission_Derived2-df1$PatientDOB)/60/24/365

#recode death
df1$Death = ifelse(df1$dischargeMethod == 'Death', 1, 0)


#EDA for PreMETs

#Remove multiple PreMETs for the same episode(single episode view)
df3=distinct(df1, df1$EpisodeID, .keep_all = TRUE)
df3=select(df3, c(HOSLOS, 'Admission Type',StayType, dischargeMethod, Death, PatientURNumber, PatientGender, SpecialtyGroup, age))
write.xlsx(df3, file="premet_unique.xlsx")



#MULTIVARIATE model
#split Premet Date & Time

df1$sent_date=as.Date(df1$SentAt)
df1$sent_time=format(df1$SentAt, "%H:%M")




#recode type of premet into categories

df1$type_recode = recode(df1$Type, 
"PreMET Urine Output <20ml/h 4 Consecutive Hours"="Renal",
"PreMET Blood Ketones >0.6 mmol/L" = "Endo_ketosis",
"PreMET Ketones >0.6" = "Endo_ketosis",
"PreMET BGL <3.5 mmol/L" = "Endo_BSL",
"PreMET BGL <3.5 or >20" = "Endo_BSL",
"PreMET BGL >20 mmol/L" = "Endo_BSL",
"PreMET BGL <3.5 or >20 mmol/L" = "Endo_BSL", 
"PreMET Low BGL" = "Endo_BSL",
"PreMET Chest Pain" = "CVS_CP",
"PreMET SBP >200 mmHg" ="CVS_BP",
"PreMET HR Within Orange Zone" = "CVS_HR",
"PreMET HR in Orange Zone" = "CVS_HR",
"PreMET HR Orange Zone" = "CVS_HR",
"PreMET SBP Orange Zone" = "CVS_BP",
"PreMET Diastolic BP >100" = "CVS_BP",
"PreMET Sedation Level 2" = "Neurological",
"PreMET AVPU Response to Voice" = "Neurological",
"PreMET New Change in Cognition or Delirium" = "Neurological",
"PreMET AVPU Response to Pain" = "Neurological",
"PreMET RR 25-29" = "Resp",
"PreMET SpO2 Orange Zone" = "Resp",
"PreMET RR Orange Zone" = "Resp",
"PreMET Moderate Respiratory Distress" = "Resp",
"PreMET SpO2 92-95%" = "Resp",
"PreMET Pain 8-10" = "Pain",
"PreMET Epigastric Pain" = "Pain",
"PreMET Looks/Feels Unwell" = "Staff/Family concern",
"PreMET Staff Concern" = "Staff/Family concern",
"PreMET Family Concern" = "Staff/Family concern",
"PreMET Temp Orange Zone" = "Fever",
"PreMET Temp >38" = "Fever",
"PreMET Seriously Abnormal Investigation" = "Abnormal Investigations",
"PreMET SPECIALTY Observation Chart Escalation" = "SpecChart")
                                
                 
#Recode age
df1$Age_recode = ifelse(df1$age >="65", 1, 0)

# derive afterhours premet
df1$afterhr = ifelse(format(df1$SentAt, "%H:%M") >= "08:00" & format(df1$SentAt, "%H:%M") <= "17:00", 0, 1)

df1$recipient_recode = recode(df1$RecipientLevel, 
"HMO"="HMO / Intern",
"Intern"="HMO / Intern",
"Intern (HMO covers Thurs)"= "HMO / Intern", 
"Registrar" = "Registrar / Senior Registrar",
"Senior Registrar" = "Registrar / Senior Registrar")

#derive LOS

df1$LOS=as.numeric(df1$Discharge_derived-df1$Admission_Derived2)/24

table(df1$recipient_recode)
proportions(table(df1$recipient_recode))

table(df1$NumberRedirects)
proportions(table(df1$NumberRedirects))
sum(!df1$Escalated == "NULL")
summary(as.numeric(df1$SentToAcceptedMins))
summary(as.numeric(df1$AcceptedToCompletedMins))

#Outcomes

sort(table(df1$PrimaryDx), decreasing=TRUE)[1:10] #primary diagnosis
sort(prop.table(table(df1$PrimaryDx)), decreasing=TRUE)[1:10]

count(filter(df1, df1$NumberRedirects<1)) #no PreMET not redirected
sum(df1$NumberRedirects) # total no of redirects

#summarise PreMEt type
table(df1$type_recode); proportions(table(df1$type_recode))



# MET linkage


# filter MET by study date range

MET_raw= read.csv(MET_raw)
MET = select(MET_raw, c('UR Number', 'Sum of Age', 'Gender', 'MET Call DateTime', 'Outcome' ))


MET$date= as.Date(MET$`MET Call DateTime`, origin="1970-01-01")
MET =filter(MET, MET$date >="2021-04-13" & MET$date <="2021-10-2")

# Generate specific dataset for MET/CB outcome

# Generate field for 24 hour post PreMET time
df1$'24h post Premet'= df1$SentAt +hours(24)


# Assign unique ID to each PreMET
df1$PreMET_ID = seq.int(nrow(df1))

# DO a left outer join (1 onto 2)
MET$URN=MET$`UR Number`
df1$URN=df1$PatientURNumber
merged = merge(x=df1,y=MET,by="URN", all.x=TRUE)

#identify no. of premets that have post-PreMET METs

merged_outcome = filter(merged, merged$`MET Call DateTime` >= merged$SentAt, merged$`MET Call DateTime`<=merged$'24h post Premet')
merged_outcome = distinct(merged_outcome, PreMET_ID, .keep_all = TRUE)
merged_outcome$outcome2 = '1'

#Add Pre-METs with outcome to entire PreMET dataset

merged2 = merge(x=df1,y=merged_outcome[, c("MET Call DateTime","outcome2", "PreMET_ID")], by='PreMET_ID', all=TRUE)
merged2$outcome = ifelse(is.na(merged2$`MET Call DateTime`), 0, 1) #assign outcome code




#Generate field for 24 hours pre-PReMET
merged2$'24h pre Premet'= merged2$SentAt -hours(24)

#Identify Cases with previous Pre-MET during admission
#count sequential no of premets for a given episode ID =COUNTIF(Y$2:Y2,Y2)
#take counts >1 as previous-preMET =IF(AL2>1, 1, 0)

# Check no of preMETs that fall within 24 hours of a previous MET call for a previous MET call
#sort by Episode ID , then PREMET send time (oldest to newest)
=IF(AL2>1,IF(Y2=Y1,IF(Q2>AR1,1,0),0)) -- meaning, IF MULTIPLE PREMETS, CHECK IF SAME EPISODE ID AS PRECEDING MET ENTRY - IF SAME EPISODE ID, CHECK IF SENT TIME IS GREATER THAN 24 HOUR PRE-PREMET

#Identify previous MET/CB calls
#Generate variable for 24 hours pre-PReMET
merged3 = merge(x=merged2,y=MET,by="URN", all.x=TRUE)

MET_before = filter(merged3, merged3$`MET Call DateTime.y` <= merged3$SentAt & merged3$`MET Call DateTime.y`>= merged3$`24h pre Premet`)
MET_before = distinct(MET_before, PreMET_ID, .keep_all = TRUE)

MET_before$PrePreMET='1'
merged2 = merge(x=merged2,y=MET_before[, c("PrePreMET", "PreMET_ID")], by='PreMET_ID', all=TRUE)
